import axios from 'axios';
import { API_URL } from '@/utils/api';
import { TOKEN_CONFIG } from './token';
import { toast } from 'sonner';

// Debug log
console.log('üîç Axios config - API_URL:', API_URL);

// T·∫°o instance axios
const axiosInstance = axios.create({
  baseURL: API_URL,
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    'Cache-Control': 'no-cache, no-store, must-revalidate',
    'Pragma': 'no-cache',
    'Expires': '0'
  },
  timeout: 30000 // 30 seconds
});

// Debug log baseURL
console.log('üîç Axios instance - baseURL:', axiosInstance.defaults.baseURL);

// Flag ƒë·ªÉ tr√°nh multiple refresh requests
let isRefreshing = false;
let failedQueue: Array<{
  resolve: (value?: unknown) => void;
  reject: (reason?: unknown) => void;
}> = [];

const processQueue = (error: unknown, token: string | null = null) => {
  failedQueue.forEach(({ resolve, reject }) => {
    if (error) {
      reject(error);
    } else {
      resolve(token);
    }
  });
  
  failedQueue = [];
};

// Th√™m interceptor ƒë·ªÉ th√™m token v√†o header
axiosInstance.interceptors.request.use(
  (config) => {
    // L·∫•y token t·ª´ localStorage
    const token = localStorage.getItem(TOKEN_CONFIG.ACCESS_TOKEN.STORAGE_KEY);

    if (token) {
      config.headers.Authorization = `${TOKEN_CONFIG.ACCESS_TOKEN.PREFIX} ${token}`;
    }

    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Th√™m interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói v√† auto refresh
axiosInstance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói 401 v√† ch∆∞a th·ª≠ refresh token
    if (error.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        // N·∫øu ƒëang refresh, th√™m request v√†o queue
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        }).then(token => {
          originalRequest.headers.Authorization = `${TOKEN_CONFIG.ACCESS_TOKEN.PREFIX} ${token}`;
          return axiosInstance(originalRequest);
        }).catch(err => {
          return Promise.reject(err);
        });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      try {
        // G·ªçi API refresh token
        const refreshToken = localStorage.getItem(TOKEN_CONFIG.REFRESH_TOKEN.STORAGE_KEY);
        
        if (!refreshToken) {
          throw new Error('No refresh token available');
        }

        const response = await axios.post(`${API_URL}/auth/refresh-token`, {
          refreshToken
        }, {
          withCredentials: true
        });

        if (response.data.success) {
          const { accessToken, refreshToken: newRefreshToken } = response.data.data;
          
          // L∆∞u tokens m·ªõi
          localStorage.setItem(TOKEN_CONFIG.ACCESS_TOKEN.STORAGE_KEY, accessToken);
          localStorage.setItem(TOKEN_CONFIG.REFRESH_TOKEN.STORAGE_KEY, newRefreshToken);
          
          // C·∫≠p nh·∫≠t header cho request hi·ªán t·∫°i
          originalRequest.headers.Authorization = `${TOKEN_CONFIG.ACCESS_TOKEN.PREFIX} ${accessToken}`;
          
          // Process queue
          processQueue(null, accessToken);
          
          // Th·ª≠ l·∫°i request ban ƒë·∫ßu
          return axiosInstance(originalRequest);
        } else {
          throw new Error('Refresh token failed');
        }
      } catch (refreshError) {
        // N·∫øu refresh token th·∫•t b·∫°i, logout user
        processQueue(refreshError, null);
        
        // Clear tokens
        localStorage.removeItem(TOKEN_CONFIG.ACCESS_TOKEN.STORAGE_KEY);
        localStorage.removeItem(TOKEN_CONFIG.REFRESH_TOKEN.STORAGE_KEY);
        localStorage.removeItem(TOKEN_CONFIG.USER.STORAGE_KEY);
        
        // Clear cookies
        document.cookie = `${TOKEN_CONFIG.ACCESS_TOKEN.COOKIE_NAME}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax`;
        document.cookie = `${TOKEN_CONFIG.REFRESH_TOKEN.COOKIE_NAME}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax`;
        document.cookie = `${TOKEN_CONFIG.USER.COOKIE_NAME}=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=Lax`;
        
        // Show notification
        toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        
        // Redirect to login page
        setTimeout(() => {
          window.location.href = '/auth/login';
        }, 1000);
        
        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    // X·ª≠ l√Ω l·ªói timeout
    if (error.code === 'ECONNABORTED') {
      console.error('Timeout Error:', error);
      toast.error('Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.');
      return Promise.reject(new Error('Y√™u c·∫ßu m·∫•t qu√° nhi·ªÅu th·ªùi gian. Vui l√≤ng th·ª≠ l·∫°i.'));
    }

    // X·ª≠ l√Ω l·ªói network
    if (error.message === 'Network Error') {
      console.error('Network Error:', error);
      toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.');
      return Promise.reject(new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.'));
    }

    // X·ª≠ l√Ω l·ªói server
    if (error.response?.status >= 500) {
      console.error('Server Error:', error);
      toast.error('C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a server. Vui l√≤ng th·ª≠ l·∫°i sau.');
      return Promise.reject(new Error('C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a server. Vui l√≤ng th·ª≠ l·∫°i sau.'));
    }

    // X·ª≠ l√Ω l·ªói 403 (Forbidden)
    if (error.response?.status === 403) {
      toast.error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y.');
      return Promise.reject(new Error('B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p v√†o t√†i nguy√™n n√†y.'));
    }

    // X·ª≠ l√Ω l·ªói 404 (Not Found)
    if (error.response?.status === 404) {
      toast.error('T√†i nguy√™n kh√¥ng t·ªìn t·∫°i.');
      return Promise.reject(new Error('T√†i nguy√™n kh√¥ng t·ªìn t·∫°i.'));
    }

    return Promise.reject(error);
  }
);

export default axiosInstance; 