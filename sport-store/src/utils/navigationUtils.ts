import type { AppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime';
import { AuthUser } from '@/types/auth';
import { debounce } from 'lodash';

// ƒê·ªãnh nghƒ©a enum UserRole
export enum UserRole {
    ADMIN = 'admin',
    USER = 'user'
}

// Th·ªùi gian ch·ªù chuy·ªÉn h∆∞·ªõng (ms)
const REDIRECT_DELAY = 100;

// Tr·∫°ng th√°i chuy·ªÉn h∆∞·ªõng
let isRedirecting = false;

// Export ƒë·ªÉ ki·ªÉm tra t·ª´ b√™n ngo√†i
export const getJustLoggedOut = () => {
    const justLoggedOut = localStorage.getItem('justLoggedOut') === 'true';
    console.log('[getJustLoggedOut] üîç Checking justLoggedOut flag:', justLoggedOut);
    return justLoggedOut;
};

// Debounced version c·ªßa handleRedirect
export const handleRedirect = debounce(async (
    router: AppRouterInstance,
    user: AuthUser | null,
    currentPath: string
): Promise<void> => {
    try {
        // Ki·ªÉm tra user data th·ª±c t·∫ø t·ª´ localStorage
        const actualUserData = localStorage.getItem('user');
        const hasActualUser = actualUserData && actualUserData !== 'null';
        
        // N·∫øu v·ª´a logout, kh√¥ng redirect
        if (getJustLoggedOut()) {
            console.log('[handleRedirect] üîí Just logged out, skipping redirect');
            return;
        }
        
        // N·∫øu kh√¥ng c√≥ user th·ª±c t·∫ø trong localStorage, kh√¥ng redirect
        if (!hasActualUser) {
            console.log('[handleRedirect] ‚ùå No actual user data in localStorage');
            return;
        }
        
        if (isRedirecting) {
            console.log('[handleRedirect] ‚è≥ Already redirecting, skipping');
            return;
        }
        if (!router) {
            console.warn('[handleRedirect] ‚ö†Ô∏è Router kh√¥ng kh·∫£ d·ª•ng, kh√¥ng th·ªÉ chuy·ªÉn h∆∞·ªõng');
            return;
        }
        isRedirecting = true;
        let redirectPath = '/';
        
        if (user) {
            if (user.role === UserRole.ADMIN) {
                redirectPath = '/admin/dashboard';
            } else {
                redirectPath = '/user';
            }
        } else {
            // N·∫øu kh√¥ng c√≥ user v√† ƒëang ·ªü trang auth, kh√¥ng redirect
            if (currentPath.startsWith('/auth/')) {
                isRedirecting = false;
                return;
            }
            
            // N·∫øu kh√¥ng c√≥ user v√† ƒëang ·ªü trang protected, redirect v·ªÅ login
            if (currentPath.startsWith('/admin/') || currentPath.startsWith('/user/')) {
                redirectPath = '/auth/login';
            }
        }
        
        console.log(`[handleRedirect] üîÑ Redirecting to: ${redirectPath}`);
        await router.replace(redirectPath);
        await new Promise(resolve => setTimeout(resolve, REDIRECT_DELAY));
        isRedirecting = false;
    } catch (error) {
        console.error('[handleRedirect] ‚ùå L·ªói khi chuy·ªÉn h∆∞·ªõng:', error);
        isRedirecting = false;
        throw error;
    }
}, 100);

// Function ƒë·ªÉ set flag logout v√† cancel debounce
export const setJustLoggedOut = () => {
    console.log('[setJustLoggedOut] üîí Setting justLoggedOut flag to true');
    localStorage.setItem('justLoggedOut', 'true');
    // Cancel debounce
    handleRedirect.cancel();
    console.log('[setJustLoggedOut] ‚úÖ Cancelled handleRedirect debounce');
    // Reset flag sau 2 gi√¢y
    setTimeout(() => {
        localStorage.removeItem('justLoggedOut');
        console.log('[setJustLoggedOut] üîÑ Reset justLoggedOut flag to false');
    }, 2000);
};

// Function ƒë·ªÉ clear flag khi login th√†nh c√¥ng
export const clearJustLoggedOut = () => {
    console.log('[clearJustLoggedOut] üßπ Clearing justLoggedOut flag');
    localStorage.removeItem('justLoggedOut');
    console.log('[clearJustLoggedOut] ‚úÖ JustLoggedOut flag cleared');
}; 