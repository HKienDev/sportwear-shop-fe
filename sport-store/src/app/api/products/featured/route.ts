import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const limit = searchParams.get('limit') || '6';
    
    console.log('üîÑ Getting featured products with limit:', limit);
    
    // G·ªçi API backend tr·ª±c ti·∫øp kh√¥ng c·∫ßn authentication
    let API_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:4000';
    
    // ƒê·∫£m b·∫£o API_URL kh√¥ng k·∫øt th√∫c b·∫±ng /api ƒë·ªÉ tr√°nh duplicate
    if (API_URL.endsWith('/api')) {
      API_URL = API_URL.slice(0, -4); // Lo·∫°i b·ªè /api ·ªü cu·ªëi
    }
    
    const url = `${API_URL}/api/products/featured?limit=${limit}`;
    console.log('üåê Calling backend URL:', url);
    
    const response = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      console.error('‚ùå Backend API error:', errorData);
      return NextResponse.json(
        { success: false, message: errorData.message || 'Kh√¥ng th·ªÉ l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t' },
        { status: response.status }
      );
    }
    
    const data = await response.json();
    console.log('‚úÖ Featured products response:', data);
    
    return NextResponse.json(data);
  } catch (error) {
    console.error('‚ùå Error in featured products API:', error);
    return NextResponse.json(
      { success: false, message: 'L·ªói server khi l·∫•y s·∫£n ph·∫©m n·ªïi b·∫≠t' },
      { status: 500 }
    );
  }
} 