'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { toast } from 'sonner';
import Breadcrumb from '@/components/user/productDetail/Breadcrumb';
import ProductGallery from '@/components/user/productDetail/ProductGallery';
import ProductRating from '@/components/user/productDetail/ProductRating';
import ProductPrice from '@/components/user/productDetail/ProductPrice';
import ColorSelector from '@/components/user/productDetail/ColorSelector';
import SizeSelector from '@/components/user/productDetail/SizeSelector';
import QuantitySelector from '@/components/user/productDetail/QuantitySelector';
import ProductActions from '@/components/user/productDetail/ProductActions';
import ProductBenefits from '@/components/user/productDetail/ProductBenefits';
import ProductDescription from '@/components/user/productDetail/ProductDescription';
import { checkAuth } from '@/services/authService';
import { getCategoryById } from '@/services/categoryService';
import { useAuthModal } from '@/context/authModalContext';
import { useAuth } from '@/context/authContext';
import { useCartOptimized } from '@/hooks/useCartOptimized';

interface Product {
  _id: string;
  name: string;
  slug: string;
  description: string;
  brand: string;
  originalPrice: number;
  salePrice: number;
  stock: number;
  categoryId: string;
  isActive: boolean;
  mainImage: string;
  subImages: string[];
  colors: string[];
  sizes: string[];
  sku: string;
  tags: string[];
  specifications?: {
    material?: string;
    weight?: string;
    stretch?: string;
    absorbency?: string;
    warranty?: string;
    origin?: string;
    fabricTechnology?: string;
    careInstructions?: string;
  };
  rating: number;
  numReviews: number;
  viewCount: number;
  soldCount: number;
  discountPercentage: number;
  isOutOfStock: boolean;
  isLowStock: boolean;
  price: number;
  images: string[];
  category: string;
  variants: Array<{
    color: string;
    size: string;
    stock: number;
  }>;
}

export default function ProductDetail() {
  const params = useParams();
  const router = useRouter();
  const { openModal } = useAuthModal();
  const { isAuthenticated } = useAuth();
  const { addToCart } = useCartOptimized();
  const [selectedColor, setSelectedColor] = useState<string | undefined>(undefined);
  const [selectedSize, setSelectedSize] = useState<string | undefined>(undefined);
  const [quantity, setQuantity] = useState(1);
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [category, setCategory] = useState<{ name: string; slug: string } | null>(null);
  const [refreshKey, setRefreshKey] = useState(0);

  useEffect(() => {
    const fetchProduct = async () => {
      try {
        setLoading(true);
        setError(null);
        
        const decodedSku = decodeURIComponent(params.sku as string);
        console.log('ƒêang g·ªçi API v·ªõi SKU:', decodedSku);
        const response = await fetch(`/api/products/sku/${decodedSku}`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Cache-Control': 'no-cache'
          }
        });
        
        // Log response ƒë·ªÉ debug
        console.log('Response status:', response.status);
        
        const result = await response.json();
        console.log('D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:', result);
        
        if (!response.ok) {
          if (response.status === 401) {
            throw new Error('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin s·∫£n ph·∫©m.');
          }
          throw new Error(result.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·∫£n ph·∫©m');
        }
        
        // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
        if (!result.success || !result.data || !result.data.product) {
          console.error('C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:', result);
          throw new Error('D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
        }
        
        // C·∫≠p nh·∫≠t state v·ªõi d·ªØ li·ªáu s·∫£n ph·∫©m
        setProduct(result.data.product);
        // Fetch category info
        if (result.data.product.categoryId) {
          const catRes = await getCategoryById(result.data.product.categoryId);
          if (catRes && catRes.success && catRes.data) {
            setCategory({ name: catRes.data.name, slug: catRes.data.slug });
          } else {
            setCategory(null);
          }
        } else {
          setCategory(null);
        }
        setLoading(false);
      } catch (error) {
        console.error('L·ªói khi t·∫£i th√¥ng tin s·∫£n ph·∫©m:', error);
        setError(error instanceof Error ? error.message : 'ƒê√£ x·∫£y ra l·ªói khi t·∫£i th√¥ng tin s·∫£n ph·∫©m');
        setLoading(false);
      }
    };

    if (params.sku) {
      fetchProduct();
    }
  }, [params.sku, refreshKey]);

  const handleColorSelect = (color: string): void => {
    setSelectedColor(color);
  };

  const handleSizeSelect = (size: string): void => {
    setSelectedSize(size);
  };

  const handleQuantityChange = (newQuantity: number): void => {
    setQuantity(newQuantity);
  };

  const handleAddToCart = async () => {
    try {
      console.log('üõí B·∫Øt ƒë·∫ßu th√™m v√†o gi·ªè h√†ng');
      
      // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc
      if (!isAuthenticated) {
        console.log('‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p, m·ªü modal ƒëƒÉng nh·∫≠p');
        openModal({
          title: 'ƒêƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng',
          description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
          pendingAction: {
            type: 'addToCart',
            data: {
              sku: product?.sku,
              color: selectedColor || (product?.colors && product.colors.length > 0 ? product.colors[0] : 'M·∫∑c ƒê·ªãnh'),
              size: selectedSize || (product?.sizes && product.sizes.length > 0 ? product.sizes[0] : 'M·∫∑c ƒê·ªãnh'),
              quantity
            },
            callback: () => {
              // Th·ª±c hi·ªán l·∫°i action sau khi ƒëƒÉng nh·∫≠p
              handleAddToCart();
            }
          }
        });
        return;
      }
      
      // N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ colors ho·∫∑c sizes, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
      const color = selectedColor || (product?.colors && product.colors.length > 0 ? product.colors[0] : 'M·∫∑c ƒê·ªãnh');
      const size = selectedSize || (product?.sizes && product.sizes.length > 0 ? product.sizes[0] : 'M·∫∑c ƒê·ªãnh');
      
      if (!color || !size) {
        console.log('‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh m√†u ho·∫∑c k√≠ch th∆∞·ªõc');
        toast.error('Kh√¥ng th·ªÉ x√°c ƒë·ªãnh m√†u v√† k√≠ch th∆∞·ªõc s·∫£n ph·∫©m');
        return;
      }

      if (!product) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m');
        toast.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m');
        return;
      }

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng t·ªìn kho
      if (product.stock < quantity) {
        console.log('‚ùå S·ªë l∆∞·ª£ng t·ªìn kho kh√¥ng ƒë·ªß');
        toast.error(`Ch·ªâ c√≤n ${product.stock} s·∫£n ph·∫©m trong kho`);
        return;
      }

      console.log('üì§ G·ªçi API th√™m v√†o gi·ªè h√†ng');
      await addToCart({
        sku: product.sku,
        color: color,
        size: size,
        quantity
      });

      console.log('‚úÖ Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng');
      // Toast ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong addToCart function
      
      // Kh√¥ng redirect ngay, ƒë·ªÉ user c√≥ th·ªÉ ti·∫øp t·ª•c shopping
      // router.push('/user/cart');
    } catch (error) {
      console.error('‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:', error);
      
      // X·ª≠ l√Ω l·ªói 401 - ch∆∞a ƒëƒÉng nh·∫≠p
      if (error instanceof Error && (error.message.includes('401') || error.message.includes('Unauthorized') || (error as any).isAuthError)) {
        console.log('‚ùå L·ªói 401 - Ch∆∞a ƒëƒÉng nh·∫≠p, m·ªü modal');
        openModal({
          title: 'ƒêƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng',
          description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng',
          pendingAction: {
            type: 'addToCart',
            data: {
              sku: product?.sku,
              color: selectedColor || (product?.colors && product.colors.length > 0 ? product.colors[0] : 'M·∫∑c ƒê·ªãnh'),
              size: selectedSize || (product?.sizes && product.sizes.length > 0 ? product.sizes[0] : 'M·∫∑c ƒê·ªãnh'),
              quantity
            },
            callback: () => {
              // Th·ª±c hi·ªán l·∫°i action sau khi ƒëƒÉng nh·∫≠p
              handleAddToCart();
            }
          }
        });
        return;
      }
      
      // C√°c l·ªói kh√°c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong addToCart function
      // Kh√¥ng c·∫ßn hi·ªÉn th·ªã toast error ·ªü ƒë√¢y n·ªØa
    }
  };

  const handleBuyNow = async () => {
    if (!product) {
      toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m");
      return;
    }
    
    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p tr∆∞·ªõc
    if (!isAuthenticated) {
      console.log('‚ùå Ch∆∞a ƒëƒÉng nh·∫≠p, m·ªü modal ƒëƒÉng nh·∫≠p');
      openModal({
        title: 'ƒêƒÉng nh·∫≠p ƒë·ªÉ mua h√†ng',
        description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s·∫£n ph·∫©m n√†y',
        pendingAction: {
          type: 'buyNow',
          data: {
            sku: product.sku,
            color: selectedColor || (product?.colors && product.colors.length > 0 ? product.colors[0] : 'M·∫∑c ƒê·ªãnh'),
            size: selectedSize || (product?.sizes && product.sizes.length > 0 ? product.sizes[0] : 'M·∫∑c ƒê·ªãnh'),
            quantity
          },
          callback: () => {
            // Th·ª±c hi·ªán l·∫°i action sau khi ƒëƒÉng nh·∫≠p
            handleBuyNow();
          }
        }
      });
      return;
    }
    
    // N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ colors ho·∫∑c sizes, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
    const color = selectedColor || (product?.colors && product.colors.length > 0 ? product.colors[0] : 'M·∫∑c ƒê·ªãnh');
    const size = selectedSize || (product?.sizes && product.sizes.length > 0 ? product.sizes[0] : 'M·∫∑c ƒê·ªãnh');

    try {
      // Th√™m v√†o gi·ªè h√†ng
      await addToCart({
        sku: product.sku,
        color: color,
        size: size,
        quantity
      });
      
      // Toast ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã trong addToCart function
      // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang gi·ªè h√†ng
      router.push('/user/cart');
    } catch (error) {
      console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
      
      // X·ª≠ l√Ω l·ªói 401 - ch∆∞a ƒëƒÉng nh·∫≠p
      if (error instanceof Error && (error.message.includes('401') || error.message.includes('Unauthorized') || (error as any).isAuthError)) {
        console.log('‚ùå L·ªói 401 - Ch∆∞a ƒëƒÉng nh·∫≠p, m·ªü modal');
        openModal({
          title: 'ƒêƒÉng nh·∫≠p ƒë·ªÉ mua h√†ng',
          description: 'Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ mua s·∫£n ph·∫©m n√†y',
          pendingAction: {
            type: 'buyNow',
            data: {
              sku: product.sku,
              color: color,
              size: size,
              quantity
            },
            callback: () => {
              // Th·ª±c hi·ªán l·∫°i action sau khi ƒëƒÉng nh·∫≠p
              handleBuyNow();
            }
          }
        });
        return;
      }
      
      // C√°c l·ªói kh√°c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω trong addToCart function
      // Kh√¥ng c·∫ßn hi·ªÉn th·ªã toast error ·ªü ƒë√¢y n·ªØa
    }
  };

  if (loading) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 bg-white">
        <div className="flex justify-center items-center h-64">
          <p className="text-lg text-gray-500">ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
        </div>
      </div>
    );
  }

  if (error || !product) {
    return (
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 bg-white">
        <div className="flex flex-col justify-center items-center h-64">
          <p className="text-lg text-red-500 mb-4">{error || 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m'}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
          >
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 bg-white">
      <Breadcrumb 
        productName={product?.name || ''}
        categoryName={category?.name || ''}
        categorySlug={category?.slug || ''}
      />

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12">
        <ProductGallery 
          images={[product.mainImage, ...product.subImages]}
          productName={product.name}
          discountPercentage={product.discountPercentage}
        />

        <div>
          <ProductRating rating={product.rating} numReviews={product.numReviews} />

          <h1 className="text-3xl font-bold text-gray-900 mb-2">{product.name}</h1>
          
          <ProductPrice originalPrice={product.originalPrice} salePrice={product.salePrice} />

          <div className="h-px bg-gray-200 my-6"></div>

          {product.colors && product.colors.length > 0 && (
            <ColorSelector 
              colors={product.colors} 
              onColorSelect={handleColorSelect}
            />
          )}
          
          {product.sizes && product.sizes.length > 0 && (
            <SizeSelector 
              sizes={product.sizes} 
              onSizeSelect={handleSizeSelect} 
            />
          )}

          <QuantitySelector 
            initialQuantity={quantity}
            onQuantityChange={handleQuantityChange}
          />

          <ProductActions 
            isSizeSelected={true}
            onBuyNow={handleBuyNow}
            onAddToCart={handleAddToCart}
            isOutOfStock={product.isOutOfStock}
          />

          <ProductBenefits />
        </div>
      </div>

      <ProductDescription 
        description={product.description}
        specifications={product.specifications}
        productSku={product.sku}
        productName={product.name}
        currentRating={product.rating}
        numReviews={product.numReviews}
      />
    </div>
  );
}