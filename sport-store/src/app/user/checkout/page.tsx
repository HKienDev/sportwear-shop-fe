'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { api } from '@/lib/api';
import { CartState, CartItem } from '@/types/cart';
import { cartService } from '@/services/cartService';
import { PaymentMethod, ShippingMethod, OrderStatus } from '@/types/order';
import { ShippingAddress } from '@/types/order';
import { Coupon } from '@/types/coupon';
import OrderItems from '@/components/user/checkout/OrderItems';
import OrderSummary from '@/components/user/checkout/OrderSummary';
import DeliveryMethod, { SHIPPING_FEES } from '@/components/user/checkout/DeliveryMethod';
import PaymentMethodComponent from '@/components/user/checkout/PaymentMethod';
import DeliveryInfo from '@/components/user/checkout/DeliveryInfo';
import CouponSection from '@/components/user/checkout/CouponSection';
import { ArrowLeft } from 'lucide-react';
import CheckoutStripePayment from '@/components/user/checkout/CheckoutStripePayment';
import StripePaymentForm from '@/components/user/checkout/StripePaymentForm';

export default function Checkout() {
  const [cart, setCart] = useState<CartState | null>(null);
  const [expandedSection, setExpandedSection] = useState<string | null>('items');
  const [shippingAddress, setShippingAddress] = useState<ShippingAddress>({
    fullName: '',
    phone: '',
    address: {
      province: {
        name: '',
        code: 0
      },
      district: {
        name: '',
        code: 0
      },
      ward: {
        name: '',
        code: 0
      },
      street: ''
    }
  });
  const [selectedShippingMethod, setSelectedShippingMethod] = useState<ShippingMethod>(ShippingMethod.STANDARD);
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<PaymentMethod>(PaymentMethod.COD);
  const [subtotal, setSubtotal] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [couponDiscount, setCouponDiscount] = useState(0);
  const [shipping, setShipping] = useState(0);
  const [couponCode, setCouponCode] = useState('');
  const [showCouponOptions, setShowCouponOptions] = useState(false);
  const [appliedCoupon, setAppliedCoupon] = useState<Coupon | null>(null);
  const [totalAfterDiscount, setTotalAfterDiscount] = useState(0);
  const [isStripeModalOpen, setIsStripeModalOpen] = useState(false);
  const [amount, setAmount] = useState<number>(0);
  const [originalTotal, setOriginalTotal] = useState(0);
  const router = useRouter();

  useEffect(() => {
    const fetchCart = async () => {
      try {
        const response = await cartService.getCart();
        if (response.success) {
          setCart(response.data);
          
          // T√≠nh to√°n t·ªïng ti·ªÅn h√†ng v√† gi·∫£m gi√°
          let totalOriginalPrice = 0;
          let totalSalePrice = 0;
          let totalDirectDiscount = 0;
          
          console.log('üõí D·ªØ li·ªáu gi·ªè h√†ng:', response.data);
          
          response.data.items.forEach((item: CartItem) => {
            const originalPrice = item.product.originalPrice;
            const salePrice = item.product.salePrice;
            const quantity = item.quantity;
            
            console.log(`üì¶ S·∫£n ph·∫©m: ${item.product.name}`);
            console.log(`üí∞ Gi√° g·ªëc: ${originalPrice}`);
            console.log(`üí∞ Gi√° khuy·∫øn m√£i: ${salePrice}`);
            console.log(`üî¢ S·ªë l∆∞·ª£ng: ${quantity}`);
            console.log(`üíµ T·ªïng ti·ªÅn: ${salePrice * quantity}`);
            
            totalOriginalPrice += originalPrice * quantity;
            totalSalePrice += salePrice * quantity;
            totalDirectDiscount += (originalPrice - salePrice) * quantity;
          });
          
          console.log(`üí∞ T·ªïng ti·ªÅn g·ªëc: ${totalOriginalPrice}`);
          console.log(`üí∞ T·ªïng ti·ªÅn sau gi·∫£m gi√°: ${totalSalePrice}`);
          console.log(`üí∞ T·ªïng gi·∫£m gi√°: ${totalDirectDiscount}`);
          
          setOriginalTotal(totalOriginalPrice);
          setSubtotal(totalSalePrice);
          setDiscount(totalOriginalPrice - totalSalePrice);
          setTotalAfterDiscount(totalSalePrice);
        } else {
          toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi·ªè h√†ng');
        }
      } catch (error) {
        console.error('Error fetching cart:', error);
        toast.error('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin gi·ªè h√†ng');
      }
    };

    fetchCart();
  }, []);

  const toggleSection = (section: string) => {
    setExpandedSection(expandedSection === section ? null : section);
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('vi-VN').format(price) + ' ‚Ç´';
  };

  // L·∫•y ph√≠ v·∫≠n chuy·ªÉn t·ª´ DeliveryMethod
  const getShippingFee = useCallback(() => {
    const shippingMethod = SHIPPING_FEES.find(fee => fee.method === selectedShippingMethod);
    return shippingMethod ? shippingMethod.fee : 0;
  }, [selectedShippingMethod]);

  // C·∫≠p nh·∫≠t ph√≠ v·∫≠n chuy·ªÉn khi thay ƒë·ªïi ph∆∞∆°ng th·ª©c v·∫≠n chuy·ªÉn
  useEffect(() => {
    setShipping(getShippingFee());
  }, [getShippingFee]);

  const handleSubmitCoupon = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    try {
      // G·ªçi API get coupon by code
      const response = await api.get(`/coupons/${encodeURIComponent(couponCode.trim())}`);

      if (response.data.success && response.data.data) {
        const coupon = response.data.data;

        // Ki·ªÉm tra tr·∫°ng th√°i
        if (coupon.status !== "Ho·∫°t ƒë·ªông") {
          throw new Error("M√£ gi·∫£m gi√° kh√¥ng ho·∫°t ƒë·ªông");
        }

        // Ki·ªÉm tra ng√†y hi·ªáu l·ª±c
        const now = new Date();
        // X·ª≠ l√Ω ng√†y th√°ng t·ª´ API m·ªôt c√°ch an to√†n
        const startDate = new Date(coupon.startDate);
        const endDate = new Date(coupon.endDate);
        
        console.log('Th·ªùi gian hi·ªán t·∫°i:', now);
        console.log('Ng√†y b·∫Øt ƒë·∫ßu:', startDate);
        console.log('Ng√†y k·∫øt th√∫c:', endDate);

        if (now < startDate) {
          throw new Error("M√£ gi·∫£m gi√° ch∆∞a c√≥ hi·ªáu l·ª±c");
        }

        if (now > endDate) {
          throw new Error("M√£ gi·∫£m gi√° ƒë√£ h·∫øt h·∫°n");
        }

        // Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng
        if (coupon.usageCount >= coupon.usageLimit) {
          throw new Error("M√£ gi·∫£m gi√° ƒë√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng");
        }

        // Ki·ªÉm tra s·ªë l·∫ßn s·ª≠ d·ª•ng c·ªßa user
        const userUsageCount = coupon.usedBy.filter((usage: { user: string }) => 
          usage.user === "67ef8e3547b8f021b9855447" // TODO: Thay b·∫±ng ID c·ªßa user hi·ªán t·∫°i
        ).length;

        if (userUsageCount >= coupon.userLimit) {
          throw new Error("B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt l∆∞·ª£t cho m√£ gi·∫£m gi√° n√†y");
        }

        // T√≠nh t·ªïng gi√° d·ª±a tr√™n salePrice
        const productSubtotal = cart?.items.reduce((total, item) => {
          return total + (item.product.salePrice * item.quantity);
        }, 0) || 0;

        // Ki·ªÉm tra gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu
        if (coupon.minimumPurchaseAmount > 0 && productSubtotal < coupon.minimumPurchaseAmount) {
          throw new Error(`ƒê∆°n h√†ng t·ªëi thi·ªÉu ${coupon.minimumPurchaseAmount.toLocaleString('vi-VN')}ƒë ƒë·ªÉ √°p d·ª•ng m√£ n√†y`);
        }

        // N·∫øu t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu h·ª£p l·ªá, c·∫≠p nh·∫≠t state
        setAppliedCoupon(coupon);
        
        // T√≠nh gi·∫£m gi√° t·ª´ m√£ gi·∫£m gi√° d·ª±a tr√™n salePrice
        if (coupon.type === 'percentage') {
          // T√≠nh gi·∫£m gi√° theo ph·∫ßn trƒÉm
          const discountAmount = (productSubtotal * coupon.value) / 100;
          setCouponDiscount(Math.round(discountAmount)); // L√†m tr√≤n ƒë·ªÉ tr√°nh s·ªë th·∫≠p ph√¢n
        } else {
          // Gi·∫£m gi√° c·ªë ƒë·ªãnh
          setCouponDiscount(coupon.value);
        }
        
        toast.success(`√Åp d·ª•ng m√£ gi·∫£m gi√° ${coupon.code} th√†nh c√¥ng!`);
      }
    } catch (error) {
      console.error('Error applying coupon:', error);
      toast.error(error instanceof Error ? error.message : 'Kh√¥ng th·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°');
    }
  };

  const handlePlaceOrder = async () => {
    try {
      if (!shippingAddress) {
        toast.error('Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng');
        return;
      }

      // N·∫øu ph∆∞∆°ng th·ª©c thanh to√°n l√† Stripe, kh√¥ng t·∫°o ƒë∆°n h√†ng ngay
      if (selectedPaymentMethod === PaymentMethod.STRIPE) {
        // L∆∞u th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ t·∫°o sau khi thanh to√°n th√†nh c√¥ng
        const orderData = {
          items: cart?.items.map(item => ({
            sku: item.product.sku,
            quantity: item.quantity,
            color: item.color || 'M·∫∑c ƒë·ªãnh',
            size: item.size || 'M·∫∑c ƒë·ªãnh'
          })),
          shippingAddress,
          shippingMethod: selectedShippingMethod,
          paymentMethod: selectedPaymentMethod,
          couponCode: appliedCoupon?.code || '',
          notes: '',
          status: OrderStatus.PENDING
        };

        // L∆∞u orderData v√†o localStorage ƒë·ªÉ s·ª≠ d·ª•ng sau khi thanh to√°n th√†nh c√¥ng
        localStorage.setItem('pendingOrderData', JSON.stringify(orderData));
        
        // M·ªü modal thanh to√°n Stripe
        setIsStripeModalOpen(true);
        setAmount(total);
        toast.info('Vui l√≤ng ho√†n th√†nh thanh to√°n ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng');
        return;
      }

      // N·∫øu l√† COD, t·∫°o ƒë∆°n h√†ng ngay
      const orderData = {
        items: cart?.items.map(item => ({
          sku: item.product.sku,
          quantity: item.quantity,
          color: item.color || 'M·∫∑c ƒë·ªãnh',
          size: item.size || 'M·∫∑c ƒë·ªãnh'
        })),
        shippingAddress,
        shippingMethod: selectedShippingMethod,
        paymentMethod: selectedPaymentMethod,
        couponCode: appliedCoupon?.code || '',
        notes: '',
        status: OrderStatus.PENDING
      };

      console.log('üì¶ D·ªØ li·ªáu ƒë∆°n h√†ng:', orderData);

      const response = await api.post('/orders', orderData);

      if (response.data.success) {
        const { orderId } = response.data.data;
        // N·∫øu l√† COD, x√≥a gi·ªè h√†ng v√† chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang invoice
        await cartService.clearCart();
        toast.success('ƒê·∫∑t h√†ng th√†nh c√¥ng!');
        router.push(`/user/invoice/${orderId}`);
      } else {
        toast.error(response.data.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng');
      }
    } catch (error: any) {
      console.error('Error creating order:', error);
      if (error.code === 'ECONNABORTED') {
        toast.error('Qu√° th·ªùi gian x·ª≠ l√Ω ƒë∆°n h√†ng, vui l√≤ng th·ª≠ l·∫°i');
      } else if (error.response?.status === 401) {
        toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng');
        router.push('/auth/login');
      } else if (error.response?.status === 400) {
        toast.error(error.response.data.message || 'Th√¥ng tin ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá');
      } else if (error.response?.status >= 500) {
        toast.error('C√≥ l·ªói x·∫£y ra t·ª´ ph√≠a server. Vui l√≤ng th·ª≠ l·∫°i sau');
      } else if (error.message === 'Network Error') {
        toast.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng');
      } else {
        toast.error(error.response?.data?.message || 'ƒê√£ c√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng');
      }
    }
  };

  const handlePaymentSuccess = async () => {
    try {
      // L·∫•y th√¥ng tin ƒë∆°n h√†ng t·ª´ localStorage
      const pendingOrderData = localStorage.getItem('pendingOrderData');
      
      if (!pendingOrderData) {
        toast.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng');
        setIsStripeModalOpen(false);
        return;
      }

      const orderData = JSON.parse(pendingOrderData);
      
      // T·∫°o ƒë∆°n h√†ng sau khi thanh to√°n th√†nh c√¥ng
      console.log('üì¶ T·∫°o ƒë∆°n h√†ng sau thanh to√°n th√†nh c√¥ng:', orderData);
      
      const response = await api.post('/orders', orderData);

      if (response.data.success) {
        const { orderId } = response.data.data;
        
        // X√≥a th√¥ng tin ƒë∆°n h√†ng t·∫°m th·ªùi
        localStorage.removeItem('pendingOrderData');
        
        // X√≥a gi·ªè h√†ng sau khi thanh to√°n th√†nh c√¥ng
        await cartService.clearCart();
        toast.success('Thanh to√°n v√† ƒë·∫∑t h√†ng th√†nh c√¥ng!');
        
        setIsStripeModalOpen(false);
        router.push(`/user/invoice/${orderId}`);
      } else {
        toast.error(response.data.message || 'Kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng sau thanh to√°n');
        setIsStripeModalOpen(false);
      }
    } catch (error) {
      console.error('Error creating order after payment:', error);
      toast.error('Thanh to√°n th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ t·∫°o ƒë∆°n h√†ng. Vui l√≤ng li√™n h·ªá h·ªó tr·ª£.');
      setIsStripeModalOpen(false);
    }
  };

  const handlePaymentError = (error: string) => {
    toast.error(error);
  };

  // T√≠nh t·ªïng ti·ªÅn thanh to√°n
  const total = totalAfterDiscount - couponDiscount + shipping;

  const handleGoBack = () => {
    router.back();
  };

  const handleStripePayment = async (orderId: string, amount: number) => {
    try {
      const response = await fetch('/api/stripe/create-payment-intent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ orderId, amount }),
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.message || 'Kh√¥ng th·ªÉ t·∫°o phi√™n thanh to√°n');
      }

      return await response.json();
    } catch (error: any) {
      throw new Error(error.message || 'L·ªói khi t·∫°o phi√™n thanh to√°n');
    }
  };

  return (
    <div className="min-h-screen bg-gray-50 pb-12">
      <div className="container mx-auto px-4 py-8">
        <div className="flex items-center mb-8">
          <button 
            onClick={handleGoBack}
            className="flex items-center text-gray-500 hover:text-gray-700 mr-6"
          >
            <ArrowLeft size={18} className="mr-1" />
            <span>Quay l·∫°i</span>
          </button>
          <h1 className="text-2xl font-bold">Thanh to√°n</h1>
        </div>
        
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* C·ªôt b√™n tr√°i - 8/12 */}
          <div className="lg:col-span-8 space-y-6">
            <DeliveryMethod
              expandedSection={expandedSection}
              deliveryMethod={selectedShippingMethod}
              setDeliveryMethod={setSelectedShippingMethod}
              toggleSection={toggleSection}
              formatPrice={formatPrice}
            />

            <OrderItems
              expandedSection={expandedSection}
              toggleSection={toggleSection}
              formatPrice={formatPrice}
            />

            <PaymentMethodComponent
              expandedSection={expandedSection}
              paymentMethod={selectedPaymentMethod}
              setPaymentMethod={setSelectedPaymentMethod}
              toggleSection={toggleSection}
              orderId={createdOrderId ?? undefined}
              amount={totalAfterDiscount}
              onPaymentSuccess={handlePaymentSuccess}
              onPaymentError={handlePaymentError}
            />
          </div>

          {/* C·ªôt b√™n ph·∫£i - 4/12 */}
          <div className="lg:col-span-4 space-y-6">
            <DeliveryInfo 
              onAddressChange={setShippingAddress}
            />

            <CouponSection
              couponCode={couponCode}
              setCouponCode={setCouponCode}
              onSubmitCoupon={handleSubmitCoupon}
              showCouponOptions={showCouponOptions}
              setShowCouponOptions={setShowCouponOptions}
            />

            <OrderSummary
              originalTotal={originalTotal}
              subtotal={subtotal}
              discount={discount}
              couponDiscount={couponDiscount}
              shipping={shipping}
              total={total}
              formatPrice={formatPrice}
              onPlaceOrder={handlePlaceOrder}
              appliedCoupon={appliedCoupon}
            />
          </div>
        </div>
      </div>
      
      {isStripeModalOpen && (
        <CheckoutStripePayment
          isOpen={isStripeModalOpen}
          onClose={() => setIsStripeModalOpen(false)}
          amount={total}
          onPaymentSuccess={handlePaymentSuccess}
          onPaymentError={handlePaymentError}
        />
      )}
      
      {clientSecret && (
        <div className="mt-8">
          <h2 className="text-2xl font-semibold mb-4">Thanh to√°n ƒë∆°n h√†ng</h2>
          <StripePaymentForm clientSecret={clientSecret} amount={amount} />
        </div>
      )}
    </div>
  );
}